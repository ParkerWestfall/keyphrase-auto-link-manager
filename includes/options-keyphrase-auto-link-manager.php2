<?php

//helper function to evaluate value of checkbox
//searches for a match in post meta data to display checked
function chroma_is_checked($needle, $haystack)
{
  echo ( $needle == $haystack) ? 'checked' : '';
}

global $post;
//options panel for keyphrase management tool

// Register Custom Post Type
function kpal() {

	$labels = array(
		'name'                  => 'Keyphrases',
		'singular_name'         => 'Keyphrase',
		'menu_name'             => 'Keyphrases',
		'name_admin_bar'        => 'Keyphrases',
		'all_items'             => 'All Items',
		'add_new'               => 'Add New',
    'add_new_item'          => 'Add New Keyphrase Auto Link',
		'new_item'              => 'New Item',
		'edit_item'             => 'Edit Item',
		'update_item'           => 'Update Item',
		'view_item'             => 'View Item',
		'view_items'            => 'View Items',
		'search_items'          => 'Search Item',
		'not_found'             => 'Not found',
		'not_found_in_trash'    => 'Not found in Trash',
		'featured_image'        => 'Featured Image'
	);
	$args = array(
		'label'                 => 'Keyphrase',
		'description'           => 'Manages Keyphrases for auto linking',
		'labels'                => $labels,
		'supports'              => array('title'),
		'hierarchical'          => false,
		'public'                => true,
		'show_ui'               => true,
		'show_in_menu'          => true,
		'menu_position'         => 80,
		'menu_icon'             => 'dashicons-admin-links',
		'show_in_admin_bar'     => true,
		'show_in_nav_menus'     => false,
		'can_export'            => false,
		'has_archive'           => false,
		'exclude_from_search'   => true,
		'publicly_queryable'    => false,
		'capability_type'       => 'page',
	);
	register_post_type( 'keyphrase', $args );

}
add_action( 'init', 'kpal', 0 );

//remove yoast from our custom post type
function my_remove_wp_seo_meta_box() {
	remove_meta_box('wpseo_meta', 'keyphrase', 'normal');
}
add_action('add_meta_boxes', 'my_remove_wp_seo_meta_box', 100);


//Fire our meta box setup function on the post editor screen.
add_action( 'load-post.php', 'kpal_post_meta_boxes_setup' );
add_action( 'load-post-new.php', 'kpal_post_meta_boxes_setup' );

//Meta box setup function.
function kpal_post_meta_boxes_setup() {

	//Add meta boxes on the 'add_meta_boxes' hook.
	add_action( 'add_meta_boxes', 'kpal_add_post_meta_boxes' );
}

//Create one or more meta boxes to be displayed on the post editor screen.
if ( !function_exists( 'kpal_add_post_meta_boxes' ) ) {
  function kpal_add_post_meta_boxes() {

    add_meta_box(
      'keyphrases',			// Unique ID
      'Keyphrases',		// Title
      'kpal_keyphrases_meta_box',		// Callback function
      'keyphrase',					// Admin page (or post type)
      'normal',					// Context
      'core'					// Priority
    );

  }
}

//execute the callback
function kpal_keyphrases_meta_box($post) {
  global $post;
  wp_nonce_field( basename( __FILE__ ), 'kpal_keyphrases_nonce' );
  ?>
  <p>
		<?php $selected = get_post_meta( $post->ID, 'kpal_keyphrases_throttle', true ); ?>
    <label>Keyphrases</label>
    <input type="text" name="kpal_keyphrases_words" id="kpal_keyphrases_words" class="widefat" value="<?php echo get_post_meta($post->ID, 'kpal_keyphrases_words')[0];  ?>">
    <br /><br />
    <label>URL to inject</label>
    <input type="text" name="kpal_keyphrases_url" id="kpal_keyphrases_url" class="widefat" value="<?php echo get_post_meta($post->ID, 'kpal_keyphrases_url')[0];  ?>">
    <br /><br />
		<label>Only one per page?</label>
		<input type="checkbox" name="kpal_keyphrases_throttle" id="kpal_keyphrases_throttle" value="Yes" <?php chroma_is_checked('Yes', $selected); ?> >Yes, Just 1
		<br />
  </p>
<?php
}

// Save the keyphrase meta box's post metadata.
function kpal_keyphrases_save_meta( $post_id, $post ) {

  // verify meta box nonce
  if ( !isset( $_POST['kpal_keyphrases_nonce'] ) || !wp_verify_nonce( $_POST['kpal_keyphrases_nonce'], basename( __FILE__ ) ) ) {
  	return;
  }

  if ( defined( 'DOING_AUTOSAVE' ) && DOING_AUTOSAVE ) {
  		return;
  }

  if ( !current_user_can( 'edit_post', $post->ID ) ) {
   	return;
  }

  $kpal_phrases = $_POST['kpal_keyphrases_words'];
  $kpal_url = $_POST['kpal_keyphrases_url'];
	$kpal_throttle = $_POST['kpal_keyphrases_throttle'];

  update_post_meta( $post->ID, 'kpal_keyphrases_words', $kpal_phrases );
  update_post_meta( $post->ID, 'kpal_keyphrases_url', $kpal_url );
	update_post_meta( $post->ID, 'kpal_keyphrases_throttle', $kpal_throttle );
}
add_action( 'save_post', 'kpal_keyphrases_save_meta', 10, 2 );

//add custom columns to post type admin interface and fill with meta content
function add_keyphrase_columns($columns) {

    return array(
      'title'=>'Title',
      'kpal_keyphrases_words'=>'Keyphrases',
      'kpal_keyphrases_url'=>'URL',
			'kpal_keyphrases_throttle'=> 'Throttle'
    );

}
add_filter('manage_keyphrase_posts_columns' , 'add_keyphrase_columns');



add_action('manage_posts_custom_column', 'kpal_columns', 10, 2);

// ADD TWO NEW COLUMNS
function kpal_columns($column) {
  global $post;
  switch ( $column ) {

    case 'kpal_keyphrases_words':
      echo get_post_meta($post->ID, 'kpal_keyphrases_words')[0];
      break;

    case 'kpal_keyphrases_url':
      echo get_post_meta($post->ID, 'kpal_keyphrases_words')[0];
      break;

  }
}


//keyphrase auto linker function
function kpal_render($content)
{
  global $page,
         $numpages,
         $multipage;

  //used to throttle occurences on string replace
  $kpalthrottle = (($multipage) ? 3 : 11);

  //query all keyphrase sets
  $kpal_query = new WP_Query(
    array(
      'post_type' => array('keyphrase')
    )
  );

	$kws = array();
	$urls = array();
  //if and while we have keyphrase entries
  if ( $kpal_query->have_posts() ) {
    while ( $kpal_query->have_posts() ) {
      $kpal_query->the_post();
          //store keyphrase and url info in variables
          $phrase = get_post_meta(get_the_ID(), 'kpal_keyphrases_words')[0];
          $url = get_post_meta(get_the_ID(), "kpal_keyphrases_url")[0];
          $url = preg_replace('/\s+/', '', $url);
					array_push($kws, $phrase);
					array_push($urls, $url);
    }
    wp_reset_postdata();
  }


  for($i=0; $i<count($kws); $i++)
  {
		//declare a flag to catch when limit has been reached
		$limitCaught = 0;
		$limitThrottle = ( get_post_meta(get_the_ID(), "kpal_keyphrases_throttle") == 'yes' ) ? 1 : 3;
		$delimiters = "";
		foreach($kws as $kw)
		{
			$delimiters .= "" . $kw . "|";
		}
		$delimiters = substr($delimiters, 0, strlen($delimiters) - 1 );
		$delimiters = '/('.$delimiters.')/iUx';
		$allContent = preg_split("/<a\s[^>]*href=(\"??)([^\" >]*?)\\1[^>]*>(.*)<\/a>/siU", $content, -1, PREG_SPLIT_DELIM_CAPTURE);
		$allContentBefore = $allContent;
		//loop through allContent array and execute the replace
		for($j = 0; $j < count($allContent); $j++)
		{
				if($limitCaught > $limitThrottle)
				{
					break;
				}

	      $pattern2 = '/<a[^>]*>(.*?)'.$kws[$i].'(.*?)<\/a>/';
				$pattern3 = '/(img|src)("|\'|="|=\')(.*)/i';
	      if(preg_match($pattern2, $allContent[$j]) || preg_match($pattern3, $allContent[$j]) )
				{
					continue;
				}
				elseif (preg_match('/'.$kws[$i].'/iUx', $allContent[$j]))
				{
					if ($limitCaught == 0)
						$allContent[$j] = preg_replace('/'.$kws[$i].'/iUx', '<a href="'.$urls[$i].'" rel="nofollow">'.$kws[$i].'</a>', $allContent[$j], 1);
					else
					{
						$allContent[$j] = str_ireplace($kws[$i], '<a href="'.$urls[$i].'" rel="nofollow">'.$kws[$i].'</a>', $allContent[$j]);
					}
					$limitCaught++;
					$content = str_replace($allContentBefore[$j], $allContent[$j], $content);
				}
	  }
	}
		return $content;
}

//filter the_content with kpal render
add_filter( 'the_content', 'kpal_render');
